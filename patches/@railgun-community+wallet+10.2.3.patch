diff --git a/node_modules/@railgun-community/wallet/dist/services/poi/wallet-poi-node-interface.js b/node_modules/@railgun-community/wallet/dist/services/poi/wallet-poi-node-interface.js
index 2aae57a..1343818 100644
--- a/node_modules/@railgun-community/wallet/dist/services/poi/wallet-poi-node-interface.js
+++ b/node_modules/@railgun-community/wallet/dist/services/poi/wallet-poi-node-interface.js
@@ -7,6 +7,7 @@ const shared_models_1 = require("@railgun-community/shared-models");
 const poi_required_1 = require("./poi-required");
 class WalletPOINodeInterface extends engine_1.POINodeInterface {
     poiNodeRequest;
+    batchSize = 100;
     constructor(poiNodeURLs) {
         super();
         this.poiNodeRequest = new poi_node_request_1.POINodeRequest(poiNodeURLs);
@@ -47,7 +48,23 @@ class WalletPOINodeInterface extends engine_1.POINodeInterface {
         return poi_required_1.POIRequired.isRequiredForNetwork(network.name);
     }
     async getPOIsPerList(txidVersion, chain, listKeys, blindedCommitmentDatas) {
-        const poisPerList = await this.poiNodeRequest.getPOIsPerList(txidVersion, chain, listKeys, blindedCommitmentDatas);
+        const poisPerList = {};
+        for (let i = 0; i < blindedCommitmentDatas.length; i += this.batchSize) {
+            const batch = blindedCommitmentDatas.slice(i, i + this.batchSize);
+            try {
+                const batchPoisPerList = 
+                // eslint-disable-next-line no-await-in-loop
+                await this.poiNodeRequest.getPOIsPerList(txidVersion, chain, listKeys, batch);
+                for (const blindedCommitment of Object.keys(batchPoisPerList)) {
+                    poisPerList[blindedCommitment] = batchPoisPerList[blindedCommitment];
+                }
+            }
+            catch (error) {
+                console.error(
+                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
+                `Error getting POIs per List: ${error.message} batch index: ${i}`);
+            }
+        }
         const poisPerListConverted = {};
         for (const blindedCommitment of Object.keys(poisPerList)) {
             poisPerListConverted[blindedCommitment] = {};
@@ -77,7 +94,18 @@ class WalletPOINodeInterface extends engine_1.POINodeInterface {
         return this.poiNodeRequest.submitPOI(txidVersion, chain, listKey, transactProofData);
     }
     async submitLegacyTransactProofs(txidVersion, chain, listKeys, legacyTransactProofDatas) {
-        return this.poiNodeRequest.submitLegacyTransactProofs(txidVersion, chain, listKeys, legacyTransactProofDatas);
+        for (let i = 0; i < legacyTransactProofDatas.length; i += this.batchSize) {
+            const batch = legacyTransactProofDatas.slice(i, i + this.batchSize);
+            try {
+                // eslint-disable-next-line no-await-in-loop
+                await this.poiNodeRequest.submitLegacyTransactProofs(txidVersion, chain, listKeys, batch);
+            }
+            catch (error) {
+                console.error(
+                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
+                `Error submitting legacy transact proofs: ${error.message} batch index: ${i}`);
+            }
+        }
     }
 }
 exports.WalletPOINodeInterface = WalletPOINodeInterface;
